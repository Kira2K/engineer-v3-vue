extends ../layout.pug

block breadcrumbs
  li.breadcrumb-item.active(aria-current="page") Оборудование
 

block body
  #table-configuration-modal.modal.fade(tabindex="-1" role="dialog" aria-labelledby="table-configuration-modal-label" aria-hidden="true")
        .modal-dialog(role="document")
          .modal-content
            .modal-header
              h5#table-configuration-modal-label.modal-title Настройка таблицы
              button.close(type="button" data-dismiss="modal" aria-label="Close")
                span(aria-hidden="true") &times;
            .modal-body
              ul#cols_order.list-group
                li.list-group-item.hr.inactive-zone Незакрепленная область

            .modal-footer
              
              button#cols_reset.btn.btn-danger.mr-auto(type="button" data-dismiss="modal") Сбросить
              button.btn.btn-secondary(type="button" data-dismiss="modal") Отмена
              button#cols_apply.btn.btn-primary(type="button") Сохранить

  .card
    .card-header
      .float-left 
        btn#clear-filters.btn.btn-danger очистить фильтры 
      .float-right
        
        button.btn.btn-primary(type="button" data-toggle="modal" data-target="#table-configuration-modal")
          i.far.fa-cog
        | &nbsp;
        a.btn.btn-success(type="button" href="/passport/edit")
          i.far.fa-plus-circle
          |  Добавить
        | &nbsp; 
        a.btn.btn-primary(type="button" href="/download/nomenclature")
          i.fa.fa-file-excel   
        | &nbsp;          
        button.btn.btn-primary(type="button" data-toggle="modal" data-target="#table-configuration-modal")
          i.far.fa-cog
        | &nbsp;
    .card-body
      #jsGrid
      .d-flex.justify-content-end
        #externalPager.external-pager.jsgrid-pager-container
append script
    script.
      $(() => {
        var localStorage =window.localStorage
        localStorage.clear()
        $('body').click(() => { 
          $('.filter').popover('hide')
        })
        var urlSearchParams = new URLSearchParams(window.location.search)
        var query = Object.fromEntries(urlSearchParams.entries())
        var data
        var fields = [
          { title: "Код",               name: "id",                 type: "number", width: 70, filtering: false },
          { title: "Оборудование",      name: "nomenclatureTitle",  type: "text",   width: 240 },
          { title: "Заводской номер",   name: "factory_id",         type: "text",   width: 280 },
          { title: "Сер. №",            name: "serial",             type: "text", },
          { title: "№ партии",          name: "partnumber",         type: "text", },
          { title: "Изготовлен",        name: "produced",           type: "date",   width: 110 },
          { title: "Состояние",         name: "state",              type: "text", },
          { title: "Изотовитель",       name: "provisioner",        type: "text", width: 130},
          { title: "MAC адрес",         name: "mac",                type: "text", width: "120px" },
          { title: "IP адрес",          name: "ip",                 type: "text", },
          { title: "MO",                name: "mo",                 type: "text", width: "150px" },
          { title: "Особые отметки",    name: "extra",              type: "text", width: 240 },
          { title: "Дата создания",     name: "created",            type: "date", width: 160},
        ]
        fields.map((el, id) => Object.assign(el, {pos: -1, id}))
        var cols = (query.cols || '').split(',').filter(el => fields[el])
        if (cols.length) {
          cols.map((i, n) => fields[i].pos = +n)
          fields.sort((a, b) => a.pos > b.pos)
        } else {
          fields.map(el => el.pos = 1)
        }

        fields.map((el, n) => $('#cols_order .hr')[el.pos > -1 ? 'before' : 'after'](`<li class="list-group-item item" data-n="${el.id}">${el.title}</li>`))
        fields = fields.filter(el => el.pos > -1)

        $('#cols_apply').click(() => {
          var order = [...$('#cols_order *')].map(el => $(el).data('n'))
          order = order.slice(0, order.indexOf(undefined))
          urlSearchParams.set('cols', order)
          document.location.href = `/passport?${urlSearchParams.toString()}`
        })
        $('#cols_reset').click(() => {
          document.location.href = `/passport`
        })

        $('#jsGrid').jsGrid({
          height: "auto",
          width: "auto",
          editing: false,
          filtering: true,
          autoload: true,
          sorting: true,
          paging: true,
          loadMessage: 'Загрузка...',
          noDataContent: 'Нет данных',
          pagerContainer: "#externalPager",
          pageSize: 20,
          pageButtonCount: 15,
          pagerFormat: "Страницы: {first} {prev} {pages} {next} {last} &nbsp;&nbsp; {pageIndex} из {pageCount}",
          pagePrevText: "&#x23F4",
          pageNextText: "&#x23F5",
          pageFirstText: "&#x23EE",
          pageLastText: "&#x23ED",
          rowClick: function(args) {
            window.location.href=`/passport/edit/${args.item.id}`
          },
          controller: {
            loadData: (filter) => {
              var deferred = $.Deferred();
              if (data) {
                console.log(filter)
                return $.grep(data, el =>
                  (!filter.nomenclatureTitle || el.nomenclatureTitle.toLowerCase().includes(filter.nomenclatureTitle.toLowerCase())
                  )
                  && (!filter.factory_id        || el.factory_id.toLowerCase().includes(filter.factory_id.toLowerCase())
                  )
                  && (!filter.serial            || el.serial.toLowerCase().includes(filter.serial.toLowerCase())
                  )
                  && (!filter.partnumber        || el.partnumber.toLowerCase().includes(filter.partnumber.toLowerCase())
                  )
                  && (!filter.state             || el.state.toLowerCase().includes(filter.state.toLowerCase()))
                  && (!filter.provisioner       || el.provisioner.toLowerCase().includes(filter.provisioner.toLowerCase())
                  )
                  && (!filter.extra             || el.extra.toLowerCase().includes(filter.extra.toLowerCase())
                  )
                  && (!filter.created || `${moment(el.createdAt).format('YYYY.MM.DD')}`.toLowerCase().startsWith(filter.created.toLowerCase())
                  )
                   && (!filter.produced || `${moment(el.produced).format('YYYY.MM.DD')}`.startsWith(filter.produced.toLowerCase())
                  )
                  && (!filter.id  || el.id.toString().toLowerCase().startsWith(filter.id.toString().toLowerCase())
                  )
                  )
                  
              } else
              $.ajax({
                url: `#{env.backendAddr}/api/passport?range=%5B0%2C10000000%5D`,
                success: function(response) {
                  deferred.resolve(data = response.map(el => {
                    el.nomenclatureTitle = `${el['nomenclature.title']}`
                    el.created = `${moment(el.createdAt).format('YYYY.MM.DD')}`
                     el.produced = `${moment(el.produced).format('YYYY.MM.DD')}`

                    el.mac = `${el['commissions.mac'] || ''}`
                    el.ip = `${el['commissions.ip'] || ''}`
                    el.mo = `${el['commissions.branch.title'] || ''}`
                    //console.log(el.factoryId, JSON.stringify(el, 0, 2))
                    return el
                  }));
                }
              })
              return deferred.promise();
            }
          },
          fields
        })
        $("#cols_order").sortable({
          placeholder: 'drop-placeholder'
          });
          $( ()=> {
          $('[data-toggle="popover"]').popover()
          
        })
          var activatedPopovers = []
          $('#clear-filters').click(()=>{
           $('.filter').removeClass( "fas fa-filter" ).addClass( "fal fa-filter" ); 
           activatedPopovers = []
          $("#jsGrid").jsGrid("loadData", {} ).done(function() {
          localStorage.removeItem('filterParams')  
            });
         })
         var headers=  $('.jsgrid-header-sortable')
      
         var initInputByField= (field)=> {
           
           var name = field.name
           var maybeParams = localStorage.getItem('filterParams') 
           
           var excistingParams =maybeParams?JSON.parse(maybeParams):{} 
           var initFilterButton = $(`<button class="btn mb-3 float-right">Применить</button>`)
          var popover = $('.popover-body')
          popover.click((event) => {
            event.stopPropagation()
          } )
          var initialValue = excistingParams[name] ?? ''
          
             var textInput = `<div class="form-group">
              <label for="key">
                <input class="form-control" id="input-${name}" name="input-${name}" type="text" placeholder="поиск по названию..."value="${initialValue}">
              </label>
            </div>`
             
            $(initFilterButton).click(() => {
             var inputValue=$(`#input-${name}` ).val()
             if(field.type=='number') inputValue = Number(inputValue)
             excistingParams[name]=inputValue
              $("#jsGrid").jsGrid("loadData", excistingParams ).done(function() {
              localStorage.setItem('filterParams',JSON.stringify(excistingParams))  
                });
              $( `#filter-${name}` ).removeClass( "fal fa-filter" ).addClass( "fas fa-filter" );  
             $(`#filter-${name}`).popover('hide')

            })

            $(popover).append(textInput)
            $(popover).append(initFilterButton)
             
           
         }
         
         fields.map((el, id)=> {
          var filter= $(`
            <i id= "filter-${el.name}" class="filter fal fa-filter p-1
              data-toggle="popover" title=" "   data-content=" "
                  >
            </i>
            `
          )
             $(headers[id]).append(filter)
           
           filter.popover({
           html:true,
         
           template:`<div class="popover" id="popover-${el.title}" role="tooltip">
           <div class="arrow"></div>
           <h3 class="popover-header">Фильтр для ${el.title}</h3>
           <div class="popover-body">Тест</div>
           </div>  `
          });
          filter.click((event) => {
           event.stopPropagation();
           activatedPopovers.map(popoverId=> {
             if(popoverId != `#filter-${el.name}`)
             $(popoverId).popover('hide')
             })
           activatedPopovers = [`#filter-${el.name}`]
           initInputByField(el) 
           })
         })
      })
